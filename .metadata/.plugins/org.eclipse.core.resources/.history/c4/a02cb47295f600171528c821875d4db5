
//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <SI_EFM8BB1_Register_Enums.h>                  // SFR declarations
#include "InitDevice.h"
#include <stdio.h>
// $[Generated Includes]
// [Generated Includes]$

	/*
	 * Breadboard wiring notes:
	 *
	 * RS wired to P1.0
	 * RW wired to ground
	 * E wired to P1.1
	 * D0-7 wired to P0.0-7
	 *
	 * DHT11 IO wired to P1.3
	 *
	 */
#define lcd_rs P1_B0
#define lcd_e P1_B1
#define lcd_data P0

#define dht11_io P1_B3

uint8_t line0[17] = {0};
char line1[17] = {0};

int16_t temperature = 0;
int16_t humidity = 0;


bit dht11_io_expected_status = 0;
uint16_t dht11_io_expected_status_expected_duration_us = 0;
uint16_t dht11_io_status_current_duration = 0;

uint8_t dht11_response_mask = 1;
uint8_t dht11_response_bit = 0;

typedef struct dht11_data {
	uint8_t humidity_integer;
	uint8_t humidity_decimal;
	uint8_t temperature_integer;
	uint8_t temperature_fractional;
	uint8_t checksum;
} dht11_data_t;


uint8_t humidity_integer = 0;
uint8_t humidity_decimal = 0;
uint8_t temperature_integer = 0;
uint8_t temperature_fractional = 0;
uint8_t checksum = 0;

void dht11_read_data()
{
	// wait til DHT11 responds with ready signal
	dht11_io_expected_status = 0;
	dht11_io_expected_status_expected_duration_us = 80;
	dht11_io_status_current_duration = 0;
	while ( dht11_io == dht11_io_expected_status && dht11_io_status_current_duration < dht11_io_expected_status_expected_duration_us)
	{
		dht11_io_status_current_duration++;
	}
	dht11_io_expected_status = 1;
	dht11_io_expected_status_expected_duration_us = 80;
	dht11_io_status_current_duration = 0;
	while ( dht11_io == dht11_io_expected_status && dht11_io_status_current_duration < dht11_io_expected_status_expected_duration_us)
	{
		dht11_io_status_current_duration++;
	}

	// read all the high pulses and assign value by duration
	dht11_io_expected_status = 1;
	dht11_io_expected_status_expected_duration_us = 50;
	dht11_io_status_current_duration = 0;
	dht11_response_bit = 0;
	for ( dht11_response_bit = 0; dht11_response_bit < 9; dht11_response_bit++ )
	{
		// wait for the dht11_io pin to go high
		while ( dht11_io != dht11_io_expected_status );
		// count time to see if the pin is high for a short or long period of time
		while ( dht11_io == dht11_io_expected_status && dht11_io_status_current_duration < dht11_io_expected_status_expected_duration_us)
		{
			dht11_io_status_current_duration++;
		}

		humidity_integer = 0;
		dht11_response_mask <<= dht11_response_bit;
		if ( dht11_io_status_current_duration >= 50 )
		{
			humidity_integer |= dht11_response_mask;
		}
		humidity = humidity_integer;
		dht11_io_status_current_duration = 0''

	}

}

void delay_us (uint16_t i)
{
	// microsecond increments based on 12 MHz sysclk and timer0
	// timer0 prescaled to sysclock/12
	// timer0 is in 16 bit mode
	TH0 = 0;
	TL0 = 0;
	while( ((TH0 << 8) | TL0) < i );
}

void delay_ms (uint16_t i)
{
	// for every one millisecond, call delay_us() 1000 times
	while ( i > 0 )
	{
		delay_us(1000);
		i--;
	}
}

void delay_seconds (uint16_t i)
{
	// for every one second, call delay_ms() 1000 times
	while ( i > 0 )
	{
		delay_ms(1000);
		i--;
	}
}

void lcd_e_pulse ()
{
	// the 12 MHz sysclk period is 81 nanoseconds
	// SETB P1.1 takes two cycles
	// each NOP takes one cycle
	// CLR P1.1 takes two cycles
	// the lcd_e latch stays high for ~500 nanoseconds
	lcd_e = 1;
	_nop_();
	_nop_();
	_nop_();
	_nop_();
	lcd_e = 0;
	delay_us(50);
}

void lcd_initialize()
{
	// wait for HD44780 LCD to be ready
	delay_us(50000);

	// select the instruction register to send commands
	// pull down the enable pin
	lcd_rs = 0;
	lcd_e = 0;

	// set function for left-to-right entry mode, disable screen shifting
	lcd_data = 0x06;
	lcd_e_pulse();

	// set function for 8 bit, two line mode
	lcd_data = 0x38;
	lcd_e_pulse();

	// turn on display with blinking cursor
	lcd_data = 0x0f;
	lcd_e_pulse();

	// clear display and return cursor to home, this needs some extra delay
	lcd_rs = 0;
	lcd_data = 0x01;
	lcd_e_pulse();
	delay_us(2000);
}

void print_to_lcd()
{
	char* current_character;
	sprintf(line0, "temperture: %d\xDF\F", temperature);
	sprintf(line1, "humidity: %d%%", humidity);

	// clear display
	lcd_rs = 0;
	lcd_data = 0x01;
	lcd_e_pulse();
	delay_us(2000);

	// change to data register
	lcd_rs = 1;

	// pause for effect
	delay_ms(500);
	// write out line0
	current_character = line0;
	do {
		lcd_data = *current_character;
		lcd_e_pulse();
	} while(*((current_character++)+1) != 0);

	// move cursor to second line
	lcd_rs = 0;
	lcd_data = 0xc0;
	lcd_e_pulse();

	// change to data register
	lcd_rs = 1;

	// pause for effect
	delay_ms(500);
	// write out line1
	current_character = line1;
	do {
		lcd_data = *current_character;
		lcd_e_pulse();
	} while(*((current_character++)+1) != 0);
}

void dht11_initialize()
{
	dht11_io = 0;
	delay_us(20000);
	dht11_io = 1;
}

//-----------------------------------------------------------------------------
// main() Routine
// ----------------------------------------------------------------------------
int main (void)
{

	// Call hardware initialization routine
	enter_DefaultMode_from_RESET();

	// set the LCD to sane settings
	lcd_initialize();
	// print some useless initial text
	print_to_lcd();

	// dht11 needs one second to be ready for the start signal
	// luckily, all the initial LCD stuff takes a bit over one second
	// otherwise, uncomment the next line for a two second delay
	// delay_seconds(2);
	dht11_initialize();
	// get some initial data asap
	dht11_read_data();
	// show initial data on the LCD
	print_to_lcd();

	while (1) 
   {
		// update LCD with new data every 10 seconds, forever
		delay_seconds(10);
		dht11_initialize();
		dht11_read_data();
		print_to_lcd();
     // $[Generated Run-time code]
     // [Generated Run-time code]$
   }                             
}


