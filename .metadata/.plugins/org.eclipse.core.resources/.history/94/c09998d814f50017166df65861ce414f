
//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <SI_EFM8BB1_Register_Enums.h>                  // SFR declarations
#include "InitDevice.h"
#include <stdio.h>
// $[Generated Includes]
// [Generated Includes]$

	/*
	 * Breadboard wiring notes:
	 *
	 * RS wired to P1.0
	 * RW wired to ground
	 * E wired to P1.1
	 * D0-7 wired to P0.0-7
	 *
	 * DHT11 IO wired to P1.3
	 *
	 */
#define lcd_rs P1_B0
#define lcd_e P1_B1
#define lcd_data P0

#define dht11_io P1_B3

uint8_t line0[17] = {0};
char line1[17] = {0};

int16_t temperature = 0;
int16_t humidity = 0;


bit dht11_io_status = 0;
uint16_t dht11_io_duration = 0;

uint8_t dht11_response_mask = 1;
uint8_t dht11_response_bit = 0;
uint8_t temperature_integer = 0;
uint8_t temperature_fractional = 0;
uint8_t humidity_integer = 0;
uint8_t humidity_decimal = 0;
uint8_t checksum = 0;

void delay_us (uint16_t i)
{
	// microsecond increments based on 12 MHz sysclk and timer0
	// timer0 prescaled to sysclock/12
	// timer0 is in 16 bit mode
	TH0 = 0;
	TL0 = 0;
	while( ((TH0 << 8) | TL0) < i );
}

void delay_ms (uint16_t i)
{
	// for every one millisecond, call delay_us() 1000 times
	while ( i > 0 )
	{
		delay_us(1000);
		i--;
	}
}

void delay_seconds (uint16_t i)
{
	// for every one second, call delay_ms() 1000 times
	while ( i > 0 )
	{
		delay_ms(1000);
		i--;
	}
}

void lcd_e_pulse ()
{
	// the 12 MHz sysclk period is 81 nanoseconds
	// SETB P1.1 takes two cycles
	// each NOP takes one cycle
	// CLR P1.1 takes two cycles
	// the lcd_e latch stays high for ~500 nanoseconds
	lcd_e = 1;
	_nop_();
	_nop_();
	_nop_();
	_nop_();
	lcd_e = 0;
	delay_us(50);
}

void lcd_initialize()
{
	// wait for HD44780 LCD to be ready
	delay_us(50000);

	// select the instruction register to send commands
	// pull down the enable pin
	lcd_rs = 0;
	lcd_e = 0;

	// set function for left-to-right entry mode, disable screen shifting
	lcd_data = 0x06;
	lcd_e_pulse();

	// set function for 8 bit, two line mode
	lcd_data = 0x38;
	lcd_e_pulse();

	// turn on display with blinking cursor
	lcd_data = 0x0f;
	lcd_e_pulse();

	// clear display and return cursor to home, this needs some extra delay
	lcd_rs = 0;
	lcd_data = 0x01;
	lcd_e_pulse();
	delay_us(2000);
}

void print_to_lcd()
{
	char* current_character;
	sprintf(line0, "temp: %d\xDF\F", temperature);
	sprintf(line1, "humidity: %d%%", humidity);

	// clear display
	lcd_rs = 0;
	lcd_data = 0x01;
	lcd_e_pulse();
	delay_us(2000);

	// change to data register
	lcd_rs = 1;

	// pause for effect
	delay_ms(500);
	// write out line0
	current_character = line0;
	do {
		lcd_data = *current_character;
		lcd_e_pulse();
	} while(*((current_character++)+1) != 0);

	// move cursor to second line
	lcd_rs = 0;
	lcd_data = 0xc0;
	lcd_e_pulse();

	// change to data register
	lcd_rs = 1;

	// pause for effect
	delay_ms(500);
	// write out line1
	current_character = line1;
	do {
		lcd_data = *current_character;
		lcd_e_pulse();
	} while(*((current_character++)+1) != 0);
}

void dht11_initialize()
{
	dht11_io = 0;
	delay_us(20000);
	dht11_io = 1;
}

void dht11_read_humidity_integer()
{
	dht11_io_status = 1;

	// read the first 8 bits into the integer value of the humidity
	for ( dht11_response_bit = 0; dht11_response_bit < 9; dht11_response_bit++ )
	{
		// expect dht11_io_duration to be above or below 500, stop caring after 500
		while ( dht11_io_status == dht11_io && dht11_io_duration < 500 )
		{
			dht11_io_duration++;
		}
		// shift the mask left by the bit number (0..39)
		dht11_response_mask <<= dht11_response_bit;
		if ( dht11_io_duration < 500 )
		{
			// AND to get a 0
			humidity_integer &= dht11_response_mask;
		}
		if ( dht11_io_duration >= 500 )
		{
			// OR to get a 1
			humidity_integer |= dht11_response_mask;
		}
	}

	dht11_io_duration = 0;
}

void dht11_read_humidity_decimal()
{
	dht11_io_status = 1;

	// read the first 8 bits into the integer value of the humidity
	for ( dht11_response_bit = 9; dht11_response_bit < 17; dht11_response_bit++ )
	{
		// expect dht11_io_duration to be above or below 500, stop caring after 500
		while ( dht11_io_status == dht11_io && dht11_io_duration < 500 )
		{
			dht11_io_duration++;
		}
		// shift the mask left by the bit number (0..39)
		dht11_response_mask <<= dht11_response_bit;
		if ( dht11_io_duration < 500 )
		{
			// AND to get a 0
			humidity_decimal &= dht11_response_mask;
		}
		if ( dht11_io_duration >= 500 )
		{
			// OR to get a 1
			humidity_decimal |= dht11_response_mask;
		}
	}

	dht11_io_duration = 0;
}

void dht11_read_temperature_integer()
{
	dht11_io_status = 1;

	// read the first 8 bits into the integer value of the humidity
	for ( dht11_response_bit = 17; dht11_response_bit < 25; dht11_response_bit++ )
	{
		// expect dht11_io_duration to be above or below 500, stop caring after 500
		while ( dht11_io_status == dht11_io && dht11_io_duration < 500 )
		{
			dht11_io_duration++;
		}
		// shift the mask left by the bit number (0..39)
		dht11_response_mask <<= dht11_response_bit;
		if ( dht11_io_duration < 500 )
		{
			// AND to get a 0
			temperature_integer &= dht11_response_mask;
		}
		if ( dht11_io_duration >= 500 )
		{
			// OR to get a 1
			temperature_integer |= dht11_response_mask;
		}
	}

	dht11_io_duration = 0;
}

void dht11_read_temperature_fractional()
{
	dht11_io_status = 1;

	// read the first 8 bits into the integer value of the humidity
	for ( dht11_response_bit = 25; dht11_response_bit < 32; dht11_response_bit++ )
	{
		// expect dht11_io_duration to be above or below 500, stop caring after 500
		while ( dht11_io_status == dht11_io && dht11_io_duration < 500 )
		{
			dht11_io_duration++;
		}
		// shift the mask left by the bit number (0..39)
		dht11_response_mask <<= dht11_response_bit;
		if ( dht11_io_duration < 500 )
		{
			// AND to get a 0
			temperature_fractional &= dht11_response_mask;
		}
		if ( dht11_io_duration >= 500 )
		{
			// OR to get a 1
			temperature_fractional |= dht11_response_mask;
		}
	}

	dht11_io_duration = 0;
}

void dht11_read_checksum()
{
	dht11_io_status = 1;

	// read the first 8 bits into the integer value of the humidity
	for ( dht11_response_bit = 32; dht11_response_bit < 40; dht11_response_bit++ )
	{
		// expect dht11_io_duration to be above or below 500, stop caring after 500
		while ( dht11_io_status == dht11_io && dht11_io_duration < 500 )
		{
			dht11_io_duration++;
		}
		// shift the mask left by the bit number (0..39)
		dht11_response_mask <<= dht11_response_bit;
		if ( dht11_io_duration < 500 )
		{
			// AND to get a 0
			checksum &= dht11_response_mask;
		}
		if ( dht11_io_duration >= 500 )
		{
			// OR to get a 1
			checksum |= dht11_response_mask;
		}
	}
	dht11_io_duration = 0;
}

//-----------------------------------------------------------------------------
// main() Routine
// ----------------------------------------------------------------------------
int main (void)
{

	// Call hardware initialization routine
	enter_DefaultMode_from_RESET();

	lcd_initialize();

	print_to_lcd();

	// dht11 needs one second to be ready for the start signal
	// luckily, all the initial LCD stuff takes a bit over one second
	dht11_initialize();
	delay_us(200);
	dht11_read_humidity_integer();
	dht11_read_humidity_decimal();
	dht11_read_temperature_integer();
	dht11_read_temperature_fractional();
	dht11_read_checksum();

	humidity = humidity_integer;
	temperature = temperature_integer;

	print_to_lcd();

	while (1) 
   {
		dht11_initialize();
		delay_seconds(5);
     // $[Generated Run-time code]
     // [Generated Run-time code]$
   }                             
}


