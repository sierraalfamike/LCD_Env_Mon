C51 COMPILER V9.53.0.0   INITDEVICE                                                        01/09/2018 02:00:38 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\sxmchxn
                    -\SimplicityStudio\v4_workspace\Humidity_Temperature_LCD\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNIN
                    -GLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/Users/sxmchxn/Simplicit
                    -yStudio/v4_workspace/Humidity_Temperature_LCD/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.4//Device/
                    -shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.4//Device/EFM8BB1/inc) PRINT(.\src\InitDev
                    -ice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              WDT_0_enter_DefaultMode_from_RESET();
  25   1              PORTS_0_enter_DefaultMode_from_RESET();
  26   1              PORTS_1_enter_DefaultMode_from_RESET();
  27   1              PBCFG_0_enter_DefaultMode_from_RESET();
  28   1              CLOCK_0_enter_DefaultMode_from_RESET();
  29   1              TIMER16_2_enter_DefaultMode_from_RESET();
  30   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  31   1              // [Config Calls]$
  32   1      
  33   1      }
  34          
  35          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
  36   1              // $[P0 - Port 0 Pin Latch]
  37   1              /***********************************************************************
  38   1               - P0.0 is low. Set P0.0 to drive low
  39   1               - P0.1 is low. Set P0.1 to drive low
  40   1               - P0.2 is low. Set P0.2 to drive low
  41   1               - P0.3 is low. Set P0.3 to drive low
  42   1               - P0.4 is low. Set P0.4 to drive low
  43   1               - P0.5 is low. Set P0.5 to drive low
  44   1               - P0.6 is low. Set P0.6 to drive low
  45   1               - P0.7 is low. Set P0.7 to drive low
  46   1               ***********************************************************************/
  47   1              P0 = P0_B0__LOW | P0_B1__LOW | P0_B2__LOW | P0_B3__LOW | P0_B4__LOW
  48   1                              | P0_B5__LOW | P0_B6__LOW | P0_B7__LOW;
  49   1              // [P0 - Port 0 Pin Latch]$
  50   1      
  51   1              // $[P0MDOUT - Port 0 Output Mode]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        01/09/2018 02:00:38 PAGE 2   

  52   1              /***********************************************************************
  53   1               - P0.0 output is push-pull
  54   1               - P0.1 output is push-pull
  55   1               - P0.2 output is push-pull
  56   1               - P0.3 output is push-pull
  57   1               - P0.4 output is push-pull
  58   1               - P0.5 output is push-pull
  59   1               - P0.6 output is push-pull
  60   1               - P0.7 output is push-pull
  61   1               ***********************************************************************/
  62   1              P0MDOUT = P0MDOUT_B0__PUSH_PULL | P0MDOUT_B1__PUSH_PULL
  63   1                              | P0MDOUT_B2__PUSH_PULL | P0MDOUT_B3__PUSH_PULL
  64   1                              | P0MDOUT_B4__PUSH_PULL | P0MDOUT_B5__PUSH_PULL
  65   1                              | P0MDOUT_B6__PUSH_PULL | P0MDOUT_B7__PUSH_PULL;
  66   1              // [P0MDOUT - Port 0 Output Mode]$
  67   1      
  68   1              // $[P0MDIN - Port 0 Input Mode]
  69   1              // [P0MDIN - Port 0 Input Mode]$
  70   1      
  71   1              // $[P0SKIP - Port 0 Skip]
  72   1              /***********************************************************************
  73   1               - P0.0 pin is skipped by the crossbar
  74   1               - P0.1 pin is skipped by the crossbar
  75   1               - P0.2 pin is skipped by the crossbar
  76   1               - P0.3 pin is skipped by the crossbar
  77   1               - P0.4 pin is skipped by the crossbar
  78   1               - P0.5 pin is skipped by the crossbar
  79   1               - P0.6 pin is skipped by the crossbar
  80   1               - P0.7 pin is skipped by the crossbar
  81   1               ***********************************************************************/
  82   1              P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__SKIPPED
  83   1                              | P0SKIP_B3__SKIPPED | P0SKIP_B4__SKIPPED | P0SKIP_B5__SKIPPED
  84   1                              | P0SKIP_B6__SKIPPED | P0SKIP_B7__SKIPPED;
  85   1              // [P0SKIP - Port 0 Skip]$
  86   1      
  87   1              // $[P0MASK - Port 0 Mask]
  88   1              // [P0MASK - Port 0 Mask]$
  89   1      
  90   1              // $[P0MAT - Port 0 Match]
  91   1              // [P0MAT - Port 0 Match]$
  92   1      
  93   1      }
  94          
  95          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
  96   1              // $[P1 - Port 1 Pin Latch]
  97   1              /***********************************************************************
  98   1               - P1.0 is low. Set P1.0 to drive low
  99   1               - P1.1 is low. Set P1.1 to drive low
 100   1               - P1.2 is low. Set P1.2 to drive low
 101   1               - P1.3 is high. Set P1.3 to drive or float high
 102   1               ***********************************************************************/
 103   1              P1 = P1_B0__LOW | P1_B1__LOW | P1_B2__LOW | P1_B3__HIGH;
 104   1              // [P1 - Port 1 Pin Latch]$
 105   1      
 106   1              // $[P1MDOUT - Port 1 Output Mode]
 107   1              /***********************************************************************
 108   1               - P1.0 output is push-pull
 109   1               - P1.1 output is push-pull
 110   1               - P1.2 output is open-drain
 111   1               - P1.3 output is open-drain
 112   1               ***********************************************************************/
 113   1              P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__PUSH_PULL
 114   1                              | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        01/09/2018 02:00:38 PAGE 3   

 115   1              // [P1MDOUT - Port 1 Output Mode]$
 116   1      
 117   1              // $[P1MDIN - Port 1 Input Mode]
 118   1              // [P1MDIN - Port 1 Input Mode]$
 119   1      
 120   1              // $[P1SKIP - Port 1 Skip]
 121   1              /***********************************************************************
 122   1               - P1.0 pin is skipped by the crossbar
 123   1               - P1.1 pin is skipped by the crossbar
 124   1               - P1.2 pin is not skipped by the crossbar
 125   1               - P1.3 pin is not skipped by the crossbar
 126   1               ***********************************************************************/
 127   1              P1SKIP = P1SKIP_B0__SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__NOT_SKIPPED
 128   1                              | P1SKIP_B3__NOT_SKIPPED;
 129   1              // [P1SKIP - Port 1 Skip]$
 130   1      
 131   1              // $[P1MASK - Port 1 Mask]
 132   1              // [P1MASK - Port 1 Mask]$
 133   1      
 134   1              // $[P1MAT - Port 1 Match]
 135   1              // [P1MAT - Port 1 Match]$
 136   1      
 137   1      }
 138          
 139          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 140   1              // $[XBR2 - Port I/O Crossbar 2]
 141   1              /***********************************************************************
 142   1               - Weak Pullups enabled 
 143   1               - Crossbar enabled
 144   1               ***********************************************************************/
 145   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 146   1              // [XBR2 - Port I/O Crossbar 2]$
 147   1      
 148   1              // $[PRTDRV - Port Drive Strength]
 149   1              // [PRTDRV - Port Drive Strength]$
 150   1      
 151   1              // $[XBR0 - Port I/O Crossbar 0]
 152   1              // [XBR0 - Port I/O Crossbar 0]$
 153   1      
 154   1              // $[XBR1 - Port I/O Crossbar 1]
 155   1              // [XBR1 - Port I/O Crossbar 1]$
 156   1      
 157   1      }
 158          
 159          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
 160   1              // $[WDTCN - Watchdog Timer Control]
 161   1              //Disable Watchdog with key sequence
 162   1              WDTCN = 0xDE; //First key
 163   1              WDTCN = 0xAD; //Second key
 164   1              // [WDTCN - Watchdog Timer Control]$
 165   1      
 166   1      }
 167          
 168          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 169   1              // $[CLKSEL - Clock Select]
 170   1              /***********************************************************************
 171   1               - Clock derived from the Internal High-Frequency Oscillator
 172   1               - SYSCLK is equal to selected clock source divided by 2
 173   1               ***********************************************************************/
 174   1              CLKSEL = CLKSEL_CLKSL__HFOSC | CLKSEL_CLKDIV__SYSCLK_DIV_2;
 175   1              // [CLKSEL - Clock Select]$
 176   1      
 177   1      }
C51 COMPILER V9.53.0.0   INITDEVICE                                                        01/09/2018 02:00:38 PAGE 4   

 178          
 179          extern void TIMER16_2_enter_DefaultMode_from_RESET(void) {
 180   1              // $[Timer Initialization]
 181   1              // Save Timer Configuration
 182   1              uint8_t TMR2CN0_TR2_save;
 183   1              TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 184   1              // Stop Timer
 185   1              TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 186   1              // [Timer Initialization]$
 187   1      
 188   1              // $[TMR2CN0 - Timer 2 Control]
 189   1              // [TMR2CN0 - Timer 2 Control]$
 190   1      
 191   1              // $[TMR2H - Timer 2 High Byte]
 192   1              // [TMR2H - Timer 2 High Byte]$
 193   1      
 194   1              // $[TMR2L - Timer 2 Low Byte]
 195   1              // [TMR2L - Timer 2 Low Byte]$
 196   1      
 197   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 198   1              /***********************************************************************
 199   1               - Timer 2 Reload High Byte = 0xA0
 200   1               ***********************************************************************/
 201   1              TMR2RLH = (0xA0 << TMR2RLH_TMR2RLH__SHIFT);
 202   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 203   1      
 204   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 205   1              /***********************************************************************
 206   1               - Timer 2 Reload Low Byte = 0x4C
 207   1               ***********************************************************************/
 208   1              TMR2RLL = (0x4C << TMR2RLL_TMR2RLL__SHIFT);
 209   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 210   1      
 211   1              // $[TMR2CN0]
 212   1              // [TMR2CN0]$
 213   1      
 214   1              // $[Timer Restoration]
 215   1              // Restore Timer Configuration
 216   1              TMR2CN0 |= TMR2CN0_TR2_save;
 217   1              // [Timer Restoration]$
 218   1      
 219   1      }
 220          
 221          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 222   1              // $[CKCON0 - Clock Control 0]
 223   1              /***********************************************************************
 224   1               - System clock divided by 12
 225   1               - Counter/Timer 0 uses the clock defined by the prescale field, SCA
 226   1               - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 227   1               - Timer 2 low byte uses the system clock
 228   1               - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 229   1               - Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 230   1               - Timer 1 uses the clock defined by the prescale field, SCA
 231   1               ***********************************************************************/
 232   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_12 | CKCON0_T0M__PRESCALE
 233   1                              | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__SYSCLK
 234   1                              | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 235   1                              | CKCON0_T1M__PRESCALE;
 236   1              // [CKCON0 - Clock Control 0]$
 237   1      
 238   1              // $[TMOD - Timer 0/1 Mode]
 239   1              /***********************************************************************
 240   1               - Mode 1, 16-bit Counter/Timer
C51 COMPILER V9.53.0.0   INITDEVICE                                                        01/09/2018 02:00:38 PAGE 5   

 241   1               - Mode 0, 13-bit Counter/Timer
 242   1               - Timer Mode
 243   1               - Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 244   1               - Timer Mode
 245   1               - Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 246   1               ***********************************************************************/
 247   1              TMOD = TMOD_T0M__MODE1 | TMOD_T1M__MODE0 | TMOD_CT0__TIMER
 248   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 249   1              // [TMOD - Timer 0/1 Mode]$
 250   1      
 251   1              // $[TCON - Timer 0/1 Control]
 252   1              /***********************************************************************
 253   1               - Start Timer 0 running
 254   1               ***********************************************************************/
 255   1              TCON |= TCON_TR0__RUN;
 256   1              // [TCON - Timer 0/1 Control]$
 257   1      
 258   1      }
 259          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     82    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
